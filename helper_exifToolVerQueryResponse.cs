// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using geoTagNinja;
//
//    var exifToolVerQueryResponse = ExifToolVerQueryResponse.FromJson(jsonString);

namespace geoTagNinja
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExifToolVerQueryResponse
    {
        [JsonProperty("hits", NullValueHandling = NullValueHandling.Ignore)]
        public Hits Hits { get; set; }

        [JsonProperty("timed_out", NullValueHandling = NullValueHandling.Ignore)]
        public bool? TimedOut { get; set; }

        [JsonProperty("took", NullValueHandling = NullValueHandling.Ignore)]
        public long? Took { get; set; }

        [JsonProperty("_shards", NullValueHandling = NullValueHandling.Ignore)]
        public Shards Shards { get; set; }
    }

    public partial class Hits
    {
        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [JsonProperty("max_score", NullValueHandling = NullValueHandling.Ignore)]
        public double? MaxScore { get; set; }

        [JsonProperty("hits", NullValueHandling = NullValueHandling.Ignore)]
        public Hit[] HitsHits { get; set; }
    }

    public partial class Hit
    {
        [JsonProperty("_type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public Fields Fields { get; set; }

        [JsonProperty("_score", NullValueHandling = NullValueHandling.Ignore)]
        public double? Score { get; set; }

        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("_index", NullValueHandling = NullValueHandling.Ignore)]
        public string Index { get; set; }
    }

    public partial class Fields
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class Shards
    {
        [JsonProperty("successful", NullValueHandling = NullValueHandling.Ignore)]
        public long? Successful { get; set; }

        [JsonProperty("failed", NullValueHandling = NullValueHandling.Ignore)]
        public long? Failed { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public long? Total { get; set; }
    }

    public partial class ExifToolVerQueryResponse
    {
        public static ExifToolVerQueryResponse FromJson(string json) => JsonConvert.DeserializeObject<ExifToolVerQueryResponse>(json, geoTagNinja.Converter.Settings);
    }

    //public static class Serialize
    //{
    //    public static string ToJson(this ExifToolVerQueryResponse self) => JsonConvert.SerializeObject(self, geoTagNinja.Converter.Settings);
    //}
    //
    //internal static class Converter
    //{
    //    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    //    {
    //        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
    //        DateParseHandling = DateParseHandling.None,
    //        Converters =
    //        {
    //            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
    //        },
    //    };
    //}
}
